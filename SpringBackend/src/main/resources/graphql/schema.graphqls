schema {
  query: Query
  mutation: Mutation
}

type Query {
  accounts: [Account]
  accountById(accountID: Int!): Account

  attendanceRecords: [AttendanceRecord]
  attendanceRecordById(attendanceID: Int!): AttendanceRecord

  books: [Book]
  bookById(bookID: Int!): Book

  bookAssignments: [BookAssigment]
  bookAssigmentById(uniqueAssignID: Int!, bookID: Int!, subjectName: String!): BookAssigment

  complaintRecords: [ComplaintRecord]
  complaintRecordById(complaintID: Int!): ComplaintRecord

  courses: [Course]
  courseByName(courseName: String!): Course

  courseEnrollments: [CourseEnrollment]
  courseEnrollmentById(enrolID: Int!, studentID: Int!): CourseEnrollment

  exams: [Exam]
  examById(examID: Int!): Exam

  examRecords: [ExamRecord]
  examRecordByPk(studentID: Int!, examID: Int!): ExamRecord

  payments: [Payment]
  paymentById(paymentID: Int!): Payment

  persons: [Person]
  personById(personID: Int!): Person

  publicEvents: [PublicEvent]
  publicEventById(eventID: Int!): PublicEvent

  students: [Student]
  studentById(studentID: Int!): Student

  studentFeedbacks: [StudentFeedback]
  studentFeedbackById(feedbackID: Int!): StudentFeedback

  subjects: [Subject]
  subjectByName(subjectName: String!): Subject
  subjectByTeacher(teacherID: Int) : Subject
}


type Mutation {
  createAccount(input: CreateAccountInput!): Account
  updateAccount(userID: Int, input: UpdateAccountInput!): Account
  deleteAccount(userID: Int): Boolean

  createAttendanceRecord(input: CreateAttendanceRecordInput!): AttendanceRecord
  updateAttendanceRecord(attendanceID: Int, input: UpdateAttendanceRecordInput!): AttendanceRecord
  deleteAttendanceRecord(attendanceID: Int): Boolean

  createBook(input: CreateBookInput!): Book
  updateBook(bookID: Int, input: UpdateBookInput!): Book
  deleteBook(bookID: Int): Boolean

  createBookAssignment(input: CreateBookAssigmentInput!): BookAssigment
  updateBookAssignment(uniqueAssignID: Int, input: UpdateBookAssigmentInput!): BookAssigment
  deleteBookAssignment(uniqueAssignID: Int): Boolean

  createComplaintRecord(input: CreateComplaintRecordInput!): ComplaintRecord
  updateComplaintRecord(complaintID: Int, input: UpdateComplaintRecordInput!): ComplaintRecord
  deleteComplaintRecord(complaintID: Int): Boolean

  createCourse(input: CreateCourseInput!): Course
  updateCourse(courseName: String, input: UpdateCourseInput!): Course
  deleteCourse(courseName: String): Boolean

  createCourseEnrollment(input: CreateCourseEnrollmentInput!): CourseEnrollment
  updateCourseEnrollment(enrolID: Int, input: UpdateCourseEnrollmentInput!): CourseEnrollment
  deleteCourseEnrollment(enrolID: Int): Boolean

  createExam(input: CreateExamInput!): Exam
  updateExam(examID: Int, input: UpdateExamInput!): Exam
  deleteExam(examID: Int): Boolean

  createExamRecord(input: CreateExamRecordInput!): ExamRecord
  updateExamRecord(studentID: Int, input: UpdateExamRecordInput!): ExamRecord
  deleteExamRecord(studentID: Int): Boolean

  createPayment(input: CreatePaymentInput!): Payment
  updatePayment(paymentID: Int, input: UpdatePaymentInput!): Payment
  deletePayment(paymentID: Int): Boolean

  createPerson(input: CreatePersonInput!): Person
  updatePerson(personID: Int, input: UpdatePersonInput!): Person
  deletePerson(personID: Int): Boolean

  createPublicEvent(input: CreatePublicEventInput!): PublicEvent
  updatePublicEvent(eventID: Int, input: UpdatePublicEventInput!): PublicEvent
  deletePublicEvent(eventID: Int): Boolean

  createStudent(input: CreateStudentInput!): Student
  updateStudent(studentID: Int, input: UpdateStudentInput!): Student
  deleteStudent(studentID: Int): Boolean

  createStudentFeedback(input: CreateStudentFeedbackInput!): StudentFeedback
  updateStudentFeedback(feedbackID: Int, input: UpdateStudentFeedbackInput!): StudentFeedback
  deleteStudentFeedback(feedbackID: Int): Boolean

  createSubject(input: CreateSubjectInput!): Subject
  updateSubject(subjectName: String, input: UpdateSubjectInput!): Subject
  deleteSubject(subjectName: String): Boolean
}

type Account {
  username: String
  password: String
  accountID: Int
}
type AttendanceRecord {
  attendanceID: Int
  studentID: Int
  subjectName: String
  dateMarked: String
  isAbsent: Boolean
  authorisedAbsence: Boolean
  extraInfo: String
}
type Book {
  bookID: Int
  bookName: String
  bookDesc: String
  price: Float
  bookLinks: String
}
type BookAssigment {
  uniqueAssignID: Int
  bookID: Int
  subjectName: String
}
type ComplaintRecord {
  complaintID: Int
  studentID: Int
  teacherID: Int
  complaintTitle: String
  complaintDesc: String
  meetingSet: String
  outcome: String
}
type Course {
  courseName: String
  courseDesc: String
  price: Float
  duration: String
  capacity: Int
  targetAge: String
}
type CourseEnrollment {
  enrolID: Int
  studentID: Int
  courseName: String
  startDate:String
  endDate: String
  finalOutcome: String
  currentlyTaking: Boolean
}
type Exam {
  examID: Int
  examTitle: String
  examDesc: String
  forSubject: String
}
type ExamRecord {
  studentID: Int
  examID: Int
  takenAt: String
}
type Payment {
  paymentID: Int
  paymentType: String
  paymentReceived: Boolean
  madeOnline: Boolean
  amount: Float
  dateMade: String
  paymentFor: String
}
type Person {
  personID: Int
  firstName: String
  lastName: String
  doB: String
  gender: String
  homeAddress: String
  email: String
  phoneNo: String
  applicationInfo: String
  typeOfPerson: String
  medicalInfo: String
  userFlag: Boolean
  relationshipWith: Int
}
type PublicEvent {
  eventID: Int
  dateInfo: String
  timeInfo: String
  openTo: String
  eventDesc: String
  relevantLinks: String
}
type Student {
  studentID: Int
  debtOwes: Float
}
type StudentFeedback {
  feedbackID: Int
  feedbackGiven: String
  studentID: Int
  teacherID: Int
}
type Subject {
  subjectName: String
  subjectDesc: String
  timeInfo: String
  dateInfo: String
  teacherID: Int
  salary: Float
  hireDate: String
  courseName: String
}
input CreateAccountInput {
  username: String!
  password: String!
  accountID: Int!
}
input UpdateAccountInput {
  username: String
  password: String
  accountID: Int
}
input DeleteAccountInput {
  accountID: Int!
}

input CreateAttendanceRecordInput {
  attendanceID: Int!
  studentID: Int!
  subjectName: String!
  dateMarked: String!
  isAbsent: Boolean!
  authorisedAbsence: Boolean!
  extraInfo: String!
}
input UpdateAttendanceRecordInput {
  attendanceID: Int
  studentID: Int
  subjectName: String
  dateMarked: String
  isAbsent: Boolean
  authorisedAbsence: Boolean
  extraInfo: String
}
input DeleteAttendanceRecordInput {
  attendanceID: Int!
}

input CreateBookInput {
  bookID: Int!
  bookName: String!
  bookDesc: String!
  price: Float!
  bookLinks: String!
}
input UpdateBookInput {
  bookID: Int
  bookName: String
  bookDesc: String
  price: Float
  bookLinks: String
}
input DeleteBookInput {
  bookID: Int!
}

input CreateBookAssigmentInput {
  uniqueAssignID: Int!
  bookID: Int!
  subjectName: String!
}
input UpdateBookAssigmentInput {
  uniqueAssignID: Int
  bookID: Int
  subjectName: String
}
input DeleteBookAssigmentInput {
  uniqueAssignID: Int!
}

input CreateComplaintRecordInput {
  complaintID: Int!
  studentID: Int!
  teacherID: Int!
  complaintTitle: String!
  complaintDesc: String!
  meetingSet: String!
  outcome: String!
}
input UpdateComplaintRecordInput {
  complaintID: Int
  studentID: Int
  teacherID: Int
  complaintTitle: String
  complaintDesc: String
  meetingSet: String
  outcome: String
}
input DeleteComplaintRecordInput {
  complaintID: Int!
}

input CreateCourseInput {
  courseName: String!
  courseDesc: String!
  price: Float!
  duration: String!
  capacity: Int!
  targetAge: String!
}
input UpdateCourseInput {
  courseName: String
  courseDesc: String
  price: Float
  duration: String
  capacity: Int
  targetAge: String
}
input DeleteCourseInput {
  courseName: String!
}

input CreateCourseEnrollmentInput {
  enrolID: Int!
  studentID: Int!
  courseName: String!
  startDate: String!
  endDate: String!
  finalOutcome: String!
  currentlyTaking: Boolean!
}
input UpdateCourseEnrollmentInput {
  enrolID: Int
  studentID: Int
  courseName: String
  startDate: String
  endDate: String
  finalOutcome: String
  currentlyTaking: Boolean
}
input DeleteCourseEnrollmentInput {
  enrolID: Int!
}

input CreateExamInput {
  examID: Int!
  examTitle: String!
  examDesc: String!
  forSubject: String!
}
input UpdateExamInput {
  examID: Int
  examTitle: String
  examDesc: String
  forSubject: String
}
input DeleteExamInput {
  examID: Int!
}

input CreateExamRecordInput {
  studentID: Int!
  examID: Int!
  takenAt: String!
}
input UpdateExamRecordInput {
  studentID: Int
  examID: Int
  takenAt: String
}
input DeleteExamRecordInput {
  studentID: Int!
  examID: Int!
}

input CreatePaymentInput {
  paymentID: Int!
  paymentType: String!
  paymentReceived: Boolean!
  madeOnline: Boolean!
  amount: Float!
  dateMade: String!
  paymentFor: String!
}
input UpdatePaymentInput {
  paymentID: Int
  paymentType: String
  paymentReceived: Boolean
  madeOnline: Boolean
  amount: Float
  dateMade: String
  paymentFor: String
}
input DeletePaymentInput {
  paymentID: Int!
}

input CreatePersonInput {
  personID: Int!
  firstName: String!
  lastName: String!
  doB: String!
  gender: String!
  homeAddress: String!
  email: String!
  phoneNo: String!
  applicationInfo: String!
  typeOfPerson: String!
  medicalInfo: String!
  userFlag: Boolean!
  relationshipWith: Int!
}
input UpdatePersonInput {
  personID: Int
  firstName: String
  lastName: String
  doB: String
  gender: String
  homeAddress: String
  email: String
  phoneNo: String
  applicationInfo: String
  typeOfPerson: String
  medicalInfo: String
  userFlag: Boolean
  relationshipWith: Int
}
input DeletePersonInput {
  personID: Int!
}

input CreatePublicEventInput {
  eventID: Int!
  dateInfo: String!
  timeInfo: String!
  openTo: String!
  eventDesc: String!
  relevantLinks: String!
}
input UpdatePublicEventInput {
  eventID: Int
  dateInfo: String
  timeInfo: String
  openTo: String
  eventDesc: String
  relevantLinks: String
}
input DeletePublicEventInput {
  eventID: Int!
}

input CreateStudentInput {
  studentID: Int!
  debtOwes: Float!
}
input UpdateStudentInput {
  studentID: Int
  debtOwes: Float
}
input DeleteStudentInput {
  studentID: Int!
}

input CreateStudentFeedbackInput {
  feedbackID: Int!
  feedbackGiven: String!
  studentID: Int!
  teacherID: Int!
}
input UpdateStudentFeedbackInput {
  feedbackID: Int
  feedbackGiven: String
  studentID: Int
  teacherID: Int
}
input DeleteStudentFeedbackInput {
  feedbackID: Int!
}

input CreateSubjectInput {
  subjectName: String!
  subjectDesc: String!
  timeInfo: String!
  dateInfo: String!
  teacherID: Int!
  salary: Float!
  hireDate: String!
}
input UpdateSubjectInput {
  subjectName: String
  subjectDesc: String
  timeInfo: String
  dateInfo: String
  teacherID: Int
  salary: Float
  hireDate: String
}
input DeleteSubjectInput {
  subjectName: String!
}